{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  register(id) {\n    this.modals.push({\n      id,\n      visible: false\n    });\n  }\n  unregister(id) {\n    this.modals = this.modals.filter(e => e.id !== id);\n  }\n  isModalOpen(id) {\n    return !!this.modals.find(e => e.id === id)?.visible;\n  }\n  toggleModal(id) {\n    const modal = this.modals.find(e => e.id === id);\n    if (modal) {\n      modal.visible = !modal.visible;\n    }\n    //this.visiable=!this.visiable\n  }\n  static #_ = this.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAQA,OAAM,MAAOA,YAAY;EAGvBC;IAFQ,WAAM,GAAU,EAAE;EAEV;EAChBC,QAAQ,CAACC,EAAS;IAChB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfF,EAAE;MACFG,OAAO,EAAC;KACT,CAAC;EAGJ;EACAC,UAAU,CAACJ,EAAS;IAClB,IAAI,CAACC,MAAM,GAAC,IAAI,CAACA,MAAM,CAACI,MAAM,CAACC,CAAC,IAAEA,CAAC,CAACN,EAAE,KAAGA,EAAE,CAAC;EAE9C;EACAO,WAAW,CAACP,EAAS;IACnB,OAAO,CAAC,CAAC,IAAI,CAACC,MAAM,CAACO,IAAI,CAACF,CAAC,IAAEA,CAAC,CAACN,EAAE,KAAGA,EAAE,CAAC,EAAEG,OAAO;EAElD;EACAM,WAAW,CAACT,EAAS;IACnB,MAAMU,KAAK,GAAC,IAAI,CAACT,MAAM,CAACO,IAAI,CAACF,CAAC,IAAEA,CAAC,CAACN,EAAE,KAAGA,EAAE,CAAC;IAC1C,IAAGU,KAAK,EAAC;MACPA,KAAK,CAACP,OAAO,GAAC,CAACO,KAAK,CAACP,OAAO;;IAE9B;EACF;EAAC;qBA1BUN,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAc,SAAZd,YAAY;IAAAe,YAFX;EAAM","names":["ModalService","constructor","register","id","modals","push","visible","unregister","filter","e","isModalOpen","find","toggleModal","modal","factory","providedIn"],"sourceRoot":"","sources":["D:\\Nam 4\\New folder\\clips\\src\\app\\service\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\ninterface Imodal{\n  id:string;\n  visible:boolean;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private modals:Imodal[]=[]\n\n  constructor() { }\n  register(id:string){\n    this.modals.push({\n      id,\n      visible:false\n    })\n\n\n  }\n  unregister(id:string){\n    this.modals=this.modals.filter(e=>e.id!==id)\n\n  }\n  isModalOpen(id:string):boolean{\n    return !!this.modals.find(e=>e.id===id)?.visible\n\n  }\n  toggleModal(id:string){\n    const modal=this.modals.find(e=>e.id===id)\n    if(modal){\n      modal.visible=!modal.visible\n    }\n    //this.visiable=!this.visiable\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}